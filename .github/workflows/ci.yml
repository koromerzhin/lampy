name: Continuous Integration
on: [push]
jobs:
  tests:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-20.04]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache npm packages
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install npm dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install
      - name: 'Docker swarm init'
        run: npm run docker_swarm-init
      - name: 'Create proxy network'
        run: npm run docker_create-network
      - name: 'Image pull'
        run: npm run docker_getpull-image
      - name: 'Build containers'
        run: npm run docker_deploy
      - name: 'sleep'
        run: npm run waiting:all
      - name: 'docker ls'
        run: npm run docker_ls
      - name: linter readme
        run: npx markdownlint readme.md
  exec:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-20.04]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache npm packages
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install npm dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install
      - name: 'NPM EXEC'
        run: npm run exec